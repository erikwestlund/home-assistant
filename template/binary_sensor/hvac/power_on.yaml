## Radiators
# Office
- name: "HVAC Radiator Power Status Office"
  unique_id: hvac_radiator_power_status_office
  state: >
    {% set radiator_enabled = is_state('input_boolean.hvac_radiator_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_radiator_power_on_control_office', 'on') %}
    {% set hvac_mode = states('sensor.hvac_mode') %}

    {# 1. System Enabled #}
    {% if hvac_mode == 'Off' %}
      off
    {# 2. Radiator Enabled Toggle #}
    {% elif not radiator_enabled %}
      off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
      off
    {# 4. HVAC Mode Check (Cooling Mode) #}
    {% elif hvac_mode == 'Cool' %}
      off
    {# 5. Default On State #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('sensor.hvac_radiator_power_status_office', 'on') %}
      mdi:radiator
    {% else %}
      mdi:radiator-off
    {% endif %}

# Family Room
- name: "HVAC Radiator Power Status Family Room"
  unique_id: hvac_radiator_power_status_family_room
  state: >
    {% set radiator_enabled = is_state('input_boolean.hvac_radiator_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_radiator_power_on_control_family_room', 'on') %}
    {% set hvac_mode = states('sensor.hvac_mode') %}

    {# 1. System Off Check #}
    {% if hvac_mode == 'Off' %}
      off
    {# 2. Radiator Enabled Toggle #}
    {% elif not radiator_enabled %}
      off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
      off
    {# 4. HVAC Mode Check (Cooling Mode) #}
    {% elif hvac_mode == 'Cool' %}
      off
    {# 5. Default On State #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('sensor.hvac_radiator_power_status_family_room', 'on') %}
      mdi:radiator
    {% else %}
      mdi:radiator-off
    {% endif %}

# Main Zone
- name: "HVAC Radiator Power Status Main Zone"
  unique_id: hvac_radiator_power_status_main_zone
  state: >
    {% set radiator_enabled = is_state('input_boolean.hvac_radiator_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_radiator_power_on_control_main_zone', 'on') %}
    {% set hvac_mode = states('sensor.hvac_mode') %}

    {# 1. System Off Check #}
    {% if hvac_mode == 'Off' %}
      off
    {# 2. Radiator Enabled Toggle #}
    {% elif not radiator_enabled %}
      off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
      off
    {# 4. HVAC Mode Check (Cooling Mode) #}
    {% elif hvac_mode == 'Cool' %}
      off
    {# 5. Default On State #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('sensor.hvac_radiator_power_status_main_zone', 'on') %}
      mdi:radiator
    {% else %}
      mdi:radiator-off
    {% endif %}

## Mini Splits
# Office: Uses current temperature to decide if off/on (boiler heats room very quickly)
- name: "HVAC Mini Split Power Status Office"
  unique_id: hvac_mini_split_power_status_office
  state: >
    {% set hvac_mode = states('sensor.hvac_mode') %}
    {% set mini_splits_enabled = is_state('input_boolean.hvac_mini_splits_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_mini_split_power_on_control_office', 'on') %}
    {% set override_status = is_state('input_boolean.hvac_override_status_office', 'on') %}
    {% set away_mode = is_state('input_boolean.hvac_away_mode', 'on') %}
    {% set away_mini_split_on = is_state('input_boolean.hvac_away_mini_split_on_office', 'on') %}
    {% set current_temp = states('sensor.current_temperature') | float %}
    {% set daytime_avg_temp = states('input_number.hvac_avg_temp_daytime_office') | float %}
    {% set nighttime_avg_temp = states('input_number.hvac_avg_temp_nighttime_office') | float %}
    {% set daytime_active = is_state('binary_sensor.hvac_daytime_active_office', 'on') %}
    {% set general_off_threshold = states('input_number.hvac_mini_split_off_threshold_office') | float %}
    {% set current_temp = states('sensor.current_temperature') | float %}

    {# Comfort mode thresholds #}
    {% set comfort_mode = states('sensor.hvac_mini_split_comfort_setting_mode_office') | lower %}
    {% set daytime_off_freezing_threshold = states('input_number.hvac_mini_split_daytime_off_freezing_threshold_office') | float %}
    {% set nighttime_off_freezing_threshold = states('input_number.hvac_mini_split_night_off_freezing_threshold_office') | float %}
    {% set off_not_working_over_freezing = states('input_number.hvac_mini_split_off_when_not_working_temp_over_freezing_threshold_office') | float %}
    {% set daytime_off_cold_threshold = states('input_number.hvac_mini_split_daytime_off_cold_threshold_office') | float %}
    {% set nighttime_off_cold_threshold = states('input_number.hvac_mini_split_night_off_cold_threshold_office') | float %}
    {% set off_not_working_over_cold = states('input_number.hvac_mini_split_off_when_not_working_temp_over_cold_threshold_office') | float %}
    {% set daytime_off_hot_threshold = states('input_number.hvac_mini_split_daytime_off_hot_threshold_office') | float %}
    {% set nighttime_off_hot_threshold = states('input_number.hvac_mini_split_night_off_hot_threshold_office') | float %}
    {% set off_not_working_over_hot = states('input_number.hvac_mini_split_off_when_not_working_temp_under_hot_threshold_office') | float %}
    {% set daytime_off_ac_threshold = states('input_number.hvac_mini_split_daytime_off_ac_threshold_office') | float %}
    {% set nighttime_off_ac_threshold = states('input_number.hvac_mini_split_night_off_ac_threshold_office') | float %}
    {% set off_not_working_over_ac = states('input_number.hvac_mini_split_off_when_not_working_temp_under_ac_threshold_office') | float %}

    {# Dynamic threshold selection based on comfort mode #}
    {% set daytime_off_threshold =
      daytime_off_freezing_threshold if comfort_mode == 'freezing' else
      daytime_off_cold_threshold if comfort_mode == 'cold' else
      daytime_off_hot_threshold if comfort_mode == 'hot' else
      daytime_off_ac_threshold if comfort_mode == 'ac' else
      states('input_number.hvac_mini_split_daytime_off_' ~ comfort_mode ~ '_threshold_office') | float %}
    {% set nighttime_off_threshold =
      nighttime_off_freezing_threshold if comfort_mode == 'freezing' else
      nighttime_off_cold_threshold if comfort_mode == 'cold' else
      nighttime_off_hot_threshold if comfort_mode == 'hot' else
      nighttime_off_ac_threshold if comfort_mode == 'ac' else
      states('input_number.hvac_mini_split_night_off_' ~ comfort_mode ~ '_threshold_office') | float %}
    {% set not_working_temp_threshold =
      off_not_working_over_freezing if comfort_mode == 'freezing' else
      off_not_working_over_cold if comfort_mode == 'cold' else
      off_not_working_over_hot if comfort_mode == 'hot' else
      off_not_working_over_ac if comfort_mode == 'ac' else
      states('input_number.hvac_mini_split_off_not_working_temp_over_' ~ comfort_mode ~ '_threshold_office') | float %}

    {# 1. System Off Check #}
    {% if hvac_mode == 'Off' %}
      off
    {# 2. Mini Splits Enabled Toggle #}
    {% elif not mini_splits_enabled %}
      off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
      off
    {# 4. Override Status #}
    {% elif override_status %}
      on
    {# 5. Away Mode #}
    {% elif away_mode %}
      {{ 'on' if away_mini_split_on else 'off' }}
    {# 6. General Off Check (using general off threshold) #}
    {% elif current_temp < general_off_threshold %}
      off
    {# 7. Temperature-based checks with explicit mode handling #}
    {% elif hvac_mode == "Cool" %}
      {# For cooling: turn off when it's cool enough outside #}
      {% if (daytime_active and current_temp < daytime_off_threshold) or
            (not daytime_active and current_temp < nighttime_off_threshold) %}
        off
      {% else %}
        on
      {% endif %}
    {% elif hvac_mode == "Heat" %}
      {# For heating: turn off when it's warm enough outside or room is too warm #}
      {% if (daytime_active and current_temp < daytime_off_threshold) or
            (not daytime_active and current_temp < nighttime_off_threshold) %}
        off
      {% elif daytime_active and current_temp > not_working_temp_threshold %}
        off
      {% else %}
        on
      {% endif %}
    {# 8. Default On State for other modes #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('binary_sensor.hvac_mini_split_power_status_office', 'on') %}
      mdi:power
    {% else %}
      mdi:power-off
    {% endif %}

# Family Room: uses daily average temperature to determine mode because of slow responsiveness of floor heat
- name: "HVAC Mini Split Power Status Family Room"
  unique_id: hvac_mini_split_power_status_family_room
  state: >
    {% set hvac_mode = states('sensor.hvac_mode') %}
    {% set mini_splits_enabled = is_state('input_boolean.hvac_mini_splits_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_mini_split_power_on_control_family_room', 'on') %}
    {% set override_status = is_state('input_boolean.hvac_override_status_family_room', 'on') %}
    {% set away_mode = is_state('input_boolean.hvac_away_mode', 'on') %}
    {% set away_mini_split_on = is_state('input_boolean.hvac_away_mini_split_on_family_room', 'on') %}
    {% set daily_avg_temp = states('sensor.daily_average_temperature') | float %}
    {% set daytime_avg_temp = states('input_number.hvac_avg_temp_daytime_family_room') | float %}
    {% set nighttime_avg_temp = states('input_number.hvac_avg_temp_nighttime_family_room') | float %}
    {% set daytime_active = is_state('binary_sensor.hvac_daytime_active_family_room', 'on') %}
    {% set general_off_threshold = states('input_number.hvac_mini_split_off_threshold_family_room') | float %}

    {# Comfort mode thresholds #}
    {% set comfort_mode = states('sensor.hvac_mini_split_comfort_setting_mode_family_room') | lower %}
    {% set daytime_off_freezing_threshold = states('input_number.hvac_mini_split_daytime_off_freezing_threshold_family_room') | float %}
    {% set nighttime_off_freezing_threshold = states('input_number.hvac_mini_split_night_off_freezing_threshold_family_room') | float %}
    {% set daytime_off_cold_threshold = states('input_number.hvac_mini_split_daytime_off_cold_threshold_family_room') | float %}
    {% set nighttime_off_cold_threshold = states('input_number.hvac_mini_split_night_off_cold_threshold_family_room') | float %}
    {% set daytime_off_hot_threshold = states('input_number.hvac_mini_split_daytime_off_hot_threshold_family_room') | float %}
    {% set nighttime_off_hot_threshold = states('input_number.hvac_mini_split_night_off_hot_threshold_family_room') | float %}

    {# Dynamic threshold selection based on comfort mode #}
    {% set daytime_off_threshold = 
      daytime_off_freezing_threshold if comfort_mode == 'freezing' else
      daytime_off_cold_threshold if comfort_mode == 'cold' else
      daytime_off_hot_threshold if comfort_mode == 'hot' else
      states('input_number.hvac_mini_split_daytime_off_' ~ comfort_mode ~ '_threshold_family_room') | float %}
    {% set nighttime_off_threshold = 
      nighttime_off_freezing_threshold if comfort_mode == 'freezing' else
      nighttime_off_cold_threshold if comfort_mode == 'cold' else
      nighttime_off_hot_threshold if comfort_mode == 'hot' else
      states('input_number.hvac_mini_split_night_off_' ~ comfort_mode ~ '_threshold_family_room') | float %}

    {# 1. System Off Check #}
    {% if hvac_mode == 'Off' %}
      off
    {# 2. Mini Splits Enabled Toggle #}
    {% elif not mini_splits_enabled %}
      off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
      off
    {# 4. Override Status #}
    {% elif override_status %}
      on
    {# 5. Away Mode #}
    {% elif away_mode %}
      {{ 'on' if away_mini_split_on else 'off' }}
    {# 6. General Off Check (using daytime or nighttime average temperature under general off threshold) #}
    {% elif (daytime_active and daytime_avg_temp < general_off_threshold) or 
            (not daytime_active and nighttime_avg_temp < general_off_threshold) %}
      off
    {# 7. Daytime Check (use daytime average temperature and daytime threshold) #}
    {% elif daytime_active and daytime_avg_temp < daytime_off_threshold %}
      off
    {# 8. Nighttime Check (use nighttime average temperature and nighttime threshold) #}
    {% elif not daytime_active and nighttime_avg_temp < nighttime_off_threshold %}
      off
    {# 9. Default On State #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('sensor.hvac_mini_split_power_status_family_room', 'on') %}
      mdi:power
    {% else %}
      mdi:power-off
    {% endif %}

# Living Room
- name: "HVAC Mini Split Power Status Living Room"
  unique_id: hvac_mini_split_power_status_living_room
  state: >
    {% set mini_splits_enabled = is_state('input_boolean.hvac_mini_splits_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_mini_split_power_on_control_living_room', 'on') %}
    {% set override_status = is_state('input_boolean.hvac_override_status_living_room', 'on') %}
    {% set away_mode = is_state('input_boolean.hvac_away_mode', 'on') %}
    {% set away_mini_split_on = is_state('input_boolean.hvac_away_mini_split_on_living_room', 'on') %}
    {% set daytime_avg_temp = states('input_number.hvac_avg_temp_daytime_living_room') | float %}
    {% set nighttime_avg_temp = states('input_number.hvac_avg_temp_nighttime_living_room') | float %}
    {% set general_off_threshold = states('input_number.hvac_mini_split_off_threshold_living_room') | float %}
    {% set daytime_active = is_state('binary_sensor.hvac_daytime_active_living_room', 'on') %}
    {% set on_with_master_bedroom = is_state('input_boolean.hvac_mini_split_living_room_on_with_master_bedroom', 'on') %}
    {% set on_with_master_bedroom_preheat = is_state('input_boolean.hvac_mini_split_living_room_on_with_master_bedroom_preheat', 'on') %}
    {% set master_bedroom_power_status = is_state('binary_sensor.hvac_mini_split_power_status_master_bedroom', 'on') %}
    {% set master_bedroom_preheating_active = is_state('binary_sensor.hvac_preheating_active_master_bedroom', 'on') %}
    {% set current_temp = states('sensor.current_temperature') | float %}
    {% set hvac_mode = states('sensor.hvac_mode') %}
    
    {# Comfort mode thresholds #}
    {% set comfort_mode = states('sensor.hvac_mini_split_comfort_setting_mode_living_room') | lower %}
    {% set daytime_off_freezing_threshold = states('input_number.hvac_mini_split_daytime_off_freezing_threshold_living_room') | float %}
    {% set nighttime_off_freezing_threshold = states('input_number.hvac_mini_split_night_off_freezing_threshold_living_room') | float %}
    {% set daytime_off_cold_threshold = states('input_number.hvac_mini_split_daytime_off_cold_threshold_living_room') | float %}
    {% set nighttime_off_cold_threshold = states('input_number.hvac_mini_split_night_off_cold_threshold_living_room') | float %}
    {% set daytime_off_hot_threshold = states('input_number.hvac_mini_split_daytime_off_hot_threshold_living_room') | float %}
    {% set nighttime_off_hot_threshold = states('input_number.hvac_mini_split_night_off_hot_threshold_living_room') | float %}
    
    {# Dynamic threshold selection based on comfort mode #}
    {% set daytime_off_threshold =
      daytime_off_freezing_threshold if comfort_mode == 'freezing' else
      daytime_off_cold_threshold if comfort_mode == 'cold' else
      daytime_off_hot_threshold if comfort_mode == 'hot' else
      states('input_number.hvac_mini_split_daytime_off_' ~ comfort_mode ~ '_threshold_living_room') | float %}
    {% set nighttime_off_threshold =
      nighttime_off_freezing_threshold if comfort_mode == 'freezing' else
      nighttime_off_cold_threshold if comfort_mode == 'cold' else
      nighttime_off_hot_threshold if comfort_mode == 'hot' else
      states('input_number.hvac_mini_split_night_off_' ~ comfort_mode ~ '_threshold_living_room') | float %}
    
    {# Determine preheating logic override #}
    {% set preheat_override = 
       'on' if (on_with_master_bedroom_preheat and master_bedroom_preheating_active) or
       (on_with_master_bedroom and master_bedroom_power_status) else 'off' %}
    
    {# 1. System Off Check #}
    {% if hvac_mode == 'Off' %}
      off
    {# 2. Mini Splits Enabled Toggle #}
    {% elif not mini_splits_enabled %}
      off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
      off
    {# 4. Override Status #}
    {% elif override_status %}
      on
    {# 5. Away Mode #}
    {% elif away_mode %}
      {{ 'on' if away_mini_split_on else 'off' }}
    {# 6. Preheat Override Check #}
    {% elif preheat_override == 'on' %}
      on
    {# 7. General Off Check (using average temperature and general thresholds) #}
    {% elif (daytime_active and daytime_avg_temp < general_off_threshold) or 
            (not daytime_active and nighttime_avg_temp < general_off_threshold) %}
      off
    {# 8. Daytime Check (using average temperature and daytime threshold) #}
    {% elif daytime_active and daytime_avg_temp < daytime_off_threshold %}
      off
    {# 9. Nighttime Check (using average temperature and nighttime threshold) #}
    {% elif not daytime_active and nighttime_avg_temp < nighttime_off_threshold %}
      off
    {# 10. Default On State #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('sensor.hvac_mini_split_power_status_living_room', 'on') %}
      mdi:power
    {% else %}
      mdi:power-off
    {% endif %}

# Dining Room
- name: "HVAC Mini Split Power Status Dining Room"
  unique_id: hvac_mini_split_power_status_dining_room
  state: >
    {% set mini_splits_enabled = is_state('input_boolean.hvac_mini_splits_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_mini_split_power_on_control_dining_room', 'on') %}
    {% set override_status = is_state('input_boolean.hvac_override_status_dining_room', 'on') %}
    {% set away_mode = is_state('input_boolean.hvac_away_mode', 'on') %}
    {% set away_mini_split_on = is_state('input_boolean.hvac_away_mini_split_on_dining_room', 'on') %}
    {% set daytime_avg_temp = states('input_number.hvac_avg_temp_daytime_dining_room') | float %}
    {% set nighttime_avg_temp = states('input_number.hvac_avg_temp_nighttime_dining_room') | float %}
    {% set general_off_threshold = states('input_number.hvac_mini_split_off_threshold_dining_room') | float %}
    {% set daytime_active = is_state('binary_sensor.hvac_daytime_active_dining_room', 'on') %}
    {% set current_temp = states('sensor.current_temperature') | float %}
    {% set hvac_mode = states('sensor.hvac_mode') %}

    {# Comfort mode thresholds #}
    {% set comfort_mode = states('sensor.hvac_mini_split_comfort_setting_mode_dining_room') | lower %}
    {% set daytime_off_freezing_threshold = states('input_number.hvac_mini_split_daytime_off_freezing_threshold_dining_room') | float %}
    {% set nighttime_off_freezing_threshold = states('input_number.hvac_mini_split_night_off_freezing_threshold_dining_room') | float %}
    {% set daytime_off_cold_threshold = states('input_number.hvac_mini_split_daytime_off_cold_threshold_dining_room') | float %}
    {% set nighttime_off_cold_threshold = states('input_number.hvac_mini_split_night_off_cold_threshold_dining_room') | float %}
    {% set daytime_off_hot_threshold = states('input_number.hvac_mini_split_daytime_off_hot_threshold_dining_room') | float %}
    {% set nighttime_off_hot_threshold = states('input_number.hvac_mini_split_night_off_hot_threshold_dining_room') | float %}

    {# Dynamic threshold selection based on comfort mode #}
    {% set daytime_off_threshold = 
         daytime_off_freezing_threshold if comfort_mode == 'freezing' else
         daytime_off_cold_threshold if comfort_mode == 'cold' else
         daytime_off_hot_threshold if comfort_mode == 'hot' else
         states('input_number.hvac_mini_split_daytime_off_' ~ comfort_mode ~ '_threshold_dining_room') | float %}
       {% set nighttime_off_threshold = 
         nighttime_off_freezing_threshold if comfort_mode == 'freezing' else
         nighttime_off_cold_threshold if comfort_mode == 'cold' else
         nighttime_off_hot_threshold if comfort_mode == 'hot' else
         states('input_number.hvac_mini_split_night_off_' ~ comfort_mode ~ '_threshold_dining_room') | float %}
    
    
    {# 1. System Off Check #}
    {% if hvac_mode == 'Off' %}
      off
    {# 2. Mini Splits Enabled Toggle #}
    {% elif not mini_splits_enabled %}
      off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
      off
    {# 4. Override Status #}
    {% elif override_status %}
      on
    {# 5. Away Mode #}
    {% elif away_mode %}
      {{ 'on' if away_mini_split_on else 'off' }}
    {# 6. General Off Check (using daytime or nighttime average temperature under general off threshold) #}
    {% elif (daytime_active and daytime_avg_temp < general_off_threshold) or 
            (not daytime_active and nighttime_avg_temp < general_off_threshold) %}
      off
    {# 7. Daytime Check (using daytime average temperature and daytime threshold) #}
    {% elif daytime_active and daytime_avg_temp < daytime_off_threshold %}
      off
    {# 8. Nighttime Check (using nighttime average temperature and nighttime threshold) #}
    {% elif not daytime_active and nighttime_avg_temp < nighttime_off_threshold %}
      off
    {# 9. Default On State #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('sensor.hvac_mini_split_power_status_dining_room', 'on') %}
      mdi:power
    {% else %}
      mdi:power-off
    {% endif %}

# Erik Office
- name: "HVAC Mini Split Power Status Erik Office"
  unique_id: hvac_mini_split_power_status_erik_office
  state: >
    {% set mini_splits_enabled = is_state('input_boolean.hvac_mini_splits_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_mini_split_power_on_control_erik_office', 'on') %}
    {% set override_status = is_state('input_boolean.hvac_override_status_erik_office', 'on') %}
    {% set away_mode = is_state('input_boolean.hvac_away_mode', 'on') %}
    {% set away_mini_split_on = is_state('input_boolean.hvac_away_mini_split_on_erik_office', 'on') %}
    {% set current_temp = states('sensor.current_temperature') | float %}
    {% set daytime_avg_temp = states('input_number.hvac_avg_temp_daytime_erik_office') | float %}
    {% set nighttime_avg_temp = states('input_number.hvac_avg_temp_nighttime_erik_office') | float %}
    {% set general_off_threshold = states('input_number.hvac_mini_split_off_threshold_erik_office') | float %}
    {% set daytime_active = is_state('binary_sensor.hvac_daytime_active_erik_office', 'on') %}
    {% set is_weekend = is_state('binary_sensor.is_weekend', 'on') %}
    {% set apply_working_setpoint = is_state('binary_sensor.hvac_apply_working_setpoint_erik_office', 'on') %}
    {% set current_temp = states('sensor.current_temperature') | float %}
    {% set hvac_mode = states('sensor.hvac_mode') %}

    {# Comfort mode thresholds #}
    {% set comfort_mode = states('sensor.hvac_mini_split_comfort_setting_mode_erik_office') | lower %}
    {% set daytime_off_freezing_threshold = states('input_number.hvac_mini_split_daytime_off_freezing_threshold_erik_office') | float %}
    {% set nighttime_off_freezing_threshold = states('input_number.hvac_mini_split_night_off_freezing_threshold_erik_office') | float %}
    {% set weekend_off_freezing_threshold = states('input_number.hvac_mini_split_weekend_off_freezing_threshold_erik_office') | float %}
    {% set daytime_off_cold_threshold = states('input_number.hvac_mini_split_daytime_off_cold_threshold_erik_office') | float %}
    {% set nighttime_off_cold_threshold = states('input_number.hvac_mini_split_night_off_cold_threshold_erik_office') | float %}
    {% set weekend_off_cold_threshold = states('input_number.hvac_mini_split_weekend_off_cold_threshold_erik_office') | float %}
    {% set daytime_off_hot_threshold = states('input_number.hvac_mini_split_daytime_off_hot_threshold_erik_office') | float %}
    {% set nighttime_off_hot_threshold = states('input_number.hvac_mini_split_night_off_hot_threshold_erik_office') | float %}
    {% set weekend_off_hot_threshold = states('input_number.hvac_mini_split_weekend_off_hot_threshold_erik_office') | float %}

    {# Dynamic threshold selection based on comfort mode #}
    {% set daytime_off_threshold =
      daytime_off_freezing_threshold if comfort_mode == 'freezing' else
      daytime_off_cold_threshold if comfort_mode == 'cold' else
      daytime_off_hot_threshold if comfort_mode == 'hot' else
      states('input_number.hvac_mini_split_daytime_off_' ~ comfort_mode ~ '_threshold_erik_office') | float %}
    {% set nighttime_off_threshold =
      nighttime_off_freezing_threshold if comfort_mode == 'freezing' else
      nighttime_off_cold_threshold if comfort_mode == 'cold' else
      nighttime_off_hot_threshold if comfort_mode == 'hot' else
      states('input_number.hvac_mini_split_night_off_' ~ comfort_mode ~ '_threshold_erik_office') | float %}
    {% set weekend_off_threshold =
      weekend_off_freezing_threshold if comfort_mode == 'freezing' else
      weekend_off_cold_threshold if comfort_mode == 'cold' else
      weekend_off_hot_threshold if comfort_mode == 'hot' else
      states('input_number.hvac_mini_split_weekend_off_' ~ comfort_mode ~ '_threshold_erik_office') | float %}

    {# 1. System Off Check #}
    {% if hvac_mode == 'Off' %}
      off
    {# 2. Mini Splits Enabled Toggle #}
    {% elif not mini_splits_enabled %}
      off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
      off
    {# 4. Override Status #}
    {% elif override_status %}
      on
    {# 5. Away Mode #}
    {% elif away_mode %}
      {{ 'on' if away_mini_split_on else 'off' }}
    {# 6. General Off Check (using daytime or nighttime average temperature under general off threshold) #}
    {% elif (daytime_active and daytime_avg_temp < general_off_threshold) or 
            (not daytime_active and nighttime_avg_temp < general_off_threshold) %}
      off
    {# 7. Apply Working Setpoint Check (turn on if working setpoint is active) #}
    {% elif apply_working_setpoint %}
      on
    {# 8. Weekend Check (turn off if it's a weekend and temperature is below the weekend threshold) #}
    {% elif is_weekend and current_temp < weekend_off_threshold %}
      off
    {# 9. Daytime Check (using daytime average temperature and daytime threshold) #}
    {% elif daytime_active and daytime_avg_temp < daytime_off_threshold %}
      off
    {# 10. Nighttime Check (using nighttime average temperature and nighttime threshold) #}
    {% elif not daytime_active and nighttime_avg_temp < nighttime_off_threshold %}
      off
    {# 11. Default On State #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('sensor.hvac_mini_split_power_status_erik_office', 'on') %}
      mdi:power
    {% else %}
      mdi:power-off
    {% endif %}

# Master Bedroom
- name: "HVAC Mini Split Power Status Master Bedroom"
  unique_id: hvac_mini_split_power_status_master_bedroom
  state: >
    {% set mini_splits_enabled = is_state('input_boolean.hvac_mini_splits_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_mini_split_power_on_control_master_bedroom', 'on') %}
    {% set override_status = is_state('input_boolean.hvac_override_status_master_bedroom', 'on') %}
    {% set away_mode = is_state('input_boolean.hvac_away_mode', 'on') %}
    {% set away_mini_split_on = is_state('input_boolean.hvac_away_mini_split_on_master_bedroom', 'on') %}
    {% set preheating_active = is_state('binary_sensor.hvac_preheating_active_master_bedroom', 'on') %}
    {% set daytime_avg_temp = states('input_number.hvac_avg_temp_daytime_master_bedroom') | float %}
    {% set nighttime_avg_temp = states('input_number.hvac_avg_temp_nighttime_master_bedroom') | float %}
    {% set general_off_threshold = states('input_number.hvac_mini_split_off_threshold_master_bedroom') | float %}
    {% set preheating_off_threshold = states('input_number.hvac_mini_split_preheating_off_threshold_master_bedroom') | float %}
    {% set daytime_active = is_state('binary_sensor.hvac_daytime_active_master_bedroom', 'on') %}
    {% set current_temp = states('sensor.current_temperature') | float %}
    {% set hvac_mode = states('sensor.hvac_mode') %}

    {# Comfort mode thresholds #}
    {% set comfort_mode = states('sensor.hvac_mini_split_comfort_setting_mode_master_bedroom') | lower %}
    {% set daytime_off_freezing_threshold = states('input_number.hvac_mini_split_daytime_off_freezing_threshold_master_bedroom') | float %}
    {% set nighttime_off_freezing_threshold = states('input_number.hvac_mini_split_night_off_freezing_threshold_master_bedroom') | float %}
    {% set daytime_off_cold_threshold = states('input_number.hvac_mini_split_daytime_off_cold_threshold_master_bedroom') | float %}
    {% set nighttime_off_cold_threshold = states('input_number.hvac_mini_split_night_off_cold_threshold_master_bedroom') | float %}
    {% set daytime_off_hot_threshold = states('input_number.hvac_mini_split_daytime_off_hot_threshold_master_bedroom') | float %}
    {% set nighttime_off_hot_threshold = states('input_number.hvac_mini_split_night_off_hot_threshold_master_bedroom') | float %}

    {# Dynamic threshold selection based on comfort mode #}
    {% set daytime_off_threshold =
      daytime_off_freezing_threshold if comfort_mode == 'freezing' else
      daytime_off_cold_threshold if comfort_mode == 'cold' else
      daytime_off_hot_threshold if comfort_mode == 'hot' else
      states('input_number.hvac_mini_split_daytime_off_' ~ comfort_mode ~ '_threshold_master_bedroom') | float %}
    {% set nighttime_off_threshold =
      nighttime_off_freezing_threshold if comfort_mode == 'freezing' else
      nighttime_off_cold_threshold if comfort_mode == 'cold' else
      nighttime_off_hot_threshold if comfort_mode == 'hot' else
      states('input_number.hvac_mini_split_night_off_' ~ comfort_mode ~ '_threshold_master_bedroom') | float %}

    {# 1. System Off Check #}
    {% if hvac_mode == 'Off' %}
      off
    {# 2. Mini Splits Enabled Toggle #}
    {% elif not mini_splits_enabled %}
      off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
      off
    {# 4. Override Status #}
    {% elif override_status %}
      on
    {# 5. Away Mode #}
    {% elif away_mode %}
      {{ 'on' if away_mini_split_on else 'off' }}
    {# 6. General Off Check using Daytime/Nighttime Average Temperature and Off Threshold #}
    {% elif (preheating_active and daytime_avg_temp <= preheating_off_threshold) or 
            (not preheating_active and daytime_active and daytime_avg_temp < general_off_threshold) or 
            (not daytime_active and nighttime_avg_temp < general_off_threshold) %}
      off
    {# 7. Preheating Active Check #}
    {% elif preheating_active %}
      on
    {# 8. Daytime Check using Daytime Average Temperature and Daytime Off Threshold #}
    {% elif daytime_active and daytime_avg_temp < daytime_off_threshold %}
      off
    {# 9. Nighttime Check using Nighttime Average Temperature and Nighttime Off Threshold #}
    {% elif not daytime_active and nighttime_avg_temp < nighttime_off_threshold %}
      off
    {# 10. Default On State #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('sensor.hvac_mini_split_power_status_master_bedroom', 'on') %}
      mdi:power
    {% else %}
      mdi:power-off
    {% endif %}

# Ducted
- name: "HVAC Ducted Power Status"
  unique_id: hvac_ducted_power_status
  state: >
    {% set ducted_enabled = is_state('input_boolean.hvac_ducted_enabled', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_power_on_control_ducted', 'on') %}
    {% set override_status = is_state('input_boolean.hvac_override_status_ducted', 'on') %}
    {% set away_mode = is_state('input_boolean.hvac_away_mode', 'on') %}
    {% set away_system_on = is_state('input_boolean.hvac_away_system_on_ducted', 'on') %}
    {% set daytime_avg_temp = states('input_number.hvac_avg_temp_daytime_ducted') | float %}
    {% set nighttime_avg_temp = states('input_number.hvac_avg_temp_nighttime_ducted') | float %}
    {% set off_threshold = states('input_number.hvac_ducted_off_threshold') | float %}
    {% set daytime_active = is_state('binary_sensor.hvac_daytime_active_ducted', 'on') %}
    {% set current_temp = states('sensor.current_temperature') | float %}
    {% set hvac_mode = states('sensor.hvac_mode') %}

    {# Comfort mode thresholds #}
    {% set comfort_mode = states('sensor.hvac_comfort_setting_mode_ducted') | lower %}
    {% set daytime_off_freezing_threshold = states('input_number.hvac_ducted_daytime_off_freezing_threshold') | float %}
    {% set nighttime_off_freezing_threshold = states('input_number.hvac_ducted_night_off_freezing_threshold') | float %}
    {% set daytime_off_cold_threshold = states('input_number.hvac_ducted_daytime_off_cold_threshold') | float %}
    {% set nighttime_off_cold_threshold = states('input_number.hvac_ducted_night_off_cold_threshold') | float %}
    {% set daytime_off_hot_threshold = states('input_number.hvac_ducted_daytime_off_hot_threshold') | float %}
    {% set nighttime_off_hot_threshold = states('input_number.hvac_ducted_night_off_hot_threshold') | float %}
    {% set daytime_off_ac_threshold = states('input_number.hvac_ducted_daytime_off_ac_threshold') | float %}
    {% set nighttime_off_ac_threshold = states('input_number.hvac_ducted_night_off_ac_threshold') | float %}

    {# Dynamic threshold selection based on comfort mode #}
    {% set daytime_off_threshold = 
        daytime_off_freezing_threshold if comfort_mode == 'freezing' else
        daytime_off_cold_threshold if comfort_mode == 'cold' else
        daytime_off_hot_threshold if comfort_mode == 'hot' else
        daytime_off_ac_threshold if comfort_mode == 'ac' else
        states('input_number.hvac_ducted_daytime_off_' ~ comfort_mode ~ '_threshold') | float %}
    {% set nighttime_off_threshold = 
        nighttime_off_freezing_threshold if comfort_mode == 'freezing' else
        nighttime_off_cold_threshold if comfort_mode == 'cold' else
        nighttime_off_hot_threshold if comfort_mode == 'hot' else
        nighttime_off_ac_threshold if comfort_mode == 'ac' else
        states('input_number.hvac_ducted_night_off_' ~ comfort_mode ~ '_threshold') | float %}
    
    {# 1. System Off Check #}
    {% if hvac_mode == 'Off' %}
        off
    {# 2. Ducted Enabled Toggle #}
    {% elif not ducted_enabled %}
        off
    {# 3. Power Control Toggle #}
    {% elif not power_control %}
        off
    {# 4. Override Status #}
    {% elif override_status %}
        on
    {# 5. Away Mode #}
    {% elif away_mode %}
        {{ 'on' if away_system_on else 'off' }}
    {# 6. General Off Check (using daytime or nighttime average temperature under general off threshold) #}
    {% elif (daytime_active and daytime_avg_temp < off_threshold) or (not daytime_active and nighttime_avg_temp < off_threshold) %}
        off
    {# 7. Daytime Check (using daytime average temperature and daytime threshold) #}
    {% elif daytime_active and daytime_avg_temp < daytime_off_threshold %}
      off
    {# 8. Nighttime Check (using nighttime average temperature and nighttime threshold) #}
    {% elif not daytime_active and nighttime_avg_temp < nighttime_off_threshold %}
      off
    {# 9. Default On State #}
    {% else %}
      on
    {% endif %}
  icon: >
    {% if is_state('sensor.hvac_ducted_power_status', 'on') %}
      mdi:power
    {% else %}
      mdi:power-off
    {% endif %}

## Space Heaters
# Office
- name: "HVAC Space Heater Enabled Office"
  unique_id: hvac_space_heater_enabled_office
  state: >
    {% set override = is_state('input_boolean.hvac_override_status_office_space_heater', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_space_heater_power_on_control_office', 'on') %}
    {% set apply_working = is_state('binary_sensor.hvac_apply_working_setpoint_office', 'on') %}
    {% set motion = is_state('binary_sensor.tina_desk_motion', 'on') %}
    # Weekday only
    {% set work_hours = is_state('binary_sensor.hvac_work_hours_in_window', 'on') %}
    {% set home = is_state('binary_sensor.tina_home', 'on') %}

    {{ power_control and (
       override or
       (apply_working and motion) or
       (work_hours and home and motion)
    ) }}

- name: "HVAC Space Heater Active Office"
  unique_id: hvac_space_heater_active_office
  state: >
    {% set desk_temp = states('sensor.tina_desk_temperature') | float(0) %}
    {% set target_temp = states('input_number.hvac_space_heater_target_office') | float(0) %}
    {% set under_offset = states('input_number.hvac_under_target_start_threshold_office_space_heater') | float(0) %}
    {% set over_offset = states('input_number.hvac_over_target_stop_threshold_office_space_heater') | float(0) %}
    {% set is_heating = is_state('binary_sensor.hvac_space_heater_active_office', 'on') %}
    {% set override = is_state('input_boolean.hvac_override_status_office_space_heater', 'on') %}
    {% set power_control = is_state('input_boolean.hvac_space_heater_power_on_control_office', 'on') %}

    {{ power_control and (override or (
       is_state('binary_sensor.hvac_space_heater_enabled_office', 'on') and
       (desk_temp < (target_temp - under_offset) if not is_heating else desk_temp < (target_temp + over_offset))
    )) }}
  icon: >-
    {% if is_state('binary_sensor.hvac_space_heater_active_office', 'on') %}
      mdi:fire
    {% else %}
      mdi:fire-off
    {% endif %}